{"version":3,"sources":["webpack:///./src/app/drone/drone.module.ts","webpack:///./src/app/drone/drone.page.html","webpack:///./src/app/drone/drone.page.scss","webpack:///./src/app/drone/drone.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAA6C;AACE;AACN;AACM;AACF;AACL;AAWxC;IAAA;IAA6B,CAAC;IAAjB,cAAc;QAT1B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,0DAAW;gBACX,4DAAY;gBACZ,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,oDAAQ,EAAE,CAAC,CAAC;aAC3D;YACD,YAAY,EAAE,CAAC,oDAAQ,CAAC;SACzB,CAAC;OACW,cAAc,CAAG;IAAD,qBAAC;CAAA;AAAH;;;;;;;;;;;;AChB3B,iaAAia,6CAA6C,8JAA8J,mBAAmB,IAAI,cAAc,+K;;;;;;;;;;;ACAjpB,+DAA+D,mI;;;;;;;;;;;;;;;;;;ACArB;AAE4C;AAOtF;IAKG,kBACQ,OAA+B;QAA/B,YAAO,GAAP,OAAO,CAAwB;QALlC,aAAQ,GAAc,EAAE,CAAC;QACzB,mBAAc,GAAY,KAAK,CAAC;IAOrC,CAAC;IAEI,kCAAe,GAAtB;QACC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3B,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IAEM,0BAAO,GAAd,UAAe,OAAoB;QAClC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACvB,OAAO,CAAC,aAAa,EAAE,CAAC;SACzB;QACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,oBAAoB,CAAC;IAC/C,CAAC;IAEM,iCAAc,GAArB;QACC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACpB,CAAC;IAEM,uCAAoB,GAA3B;QACC,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC;QAC3C,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IAjCS,QAAQ;QALpB,+DAAS,CAAC;YACV,QAAQ,EAAE,UAAU;YACpB,yFAA8B;;SAE9B,CAAC;+EAOkB,iGAAsB;OAN7B,QAAQ,CAkCpB;IAAD,eAAC;CAAA;AAlCoB","file":"drone-drone-module.js","sourcesContent":["import { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { DroneTab } from './drone.page';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild([{ path: '', component: DroneTab }])\n  ],\n  declarations: [DroneTab]\n})\nexport class DroneTabModule {}\n","module.exports = \"<ion-header>\\n\\t<ion-toolbar>\\n    <ion-title>\\n      Scandit Ionic Sample\\n    </ion-title>\\n\\n    <ion-buttons end>\\n        <button ion-button icon-only (click)=\\\"toggleContinuousMode()\\\">\\n          <ion-icon name=\\\"infinite\\\" [color]=\\\"continuousMode ? 'dark' : 'light'\\\"></ion-icon>\\n        </button>\\n    </ion-buttons>\\n   </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding [ngStyle]=\\\"{ 'margin-top': scanner.contentHeight + 'px' }\\\">\\n  <p text-center *ngIf=\\\"!barcodes || barcodes.length < 1\\\">\\n    Scan a barcode!\\n  </p>\\n\\n  <p text-center *ngFor=\\\"let barcode of barcodes\\\">\\n    {{barcode.symbology}}: {{barcode.data}}\\n  </p>\\n\\n  <button full ion-button *ngIf=\\\"!continuousMode && barcodes && barcodes.length > 0\\\" (click)=\\\"resumeScanning()\\\">Continue Scanning</button>\\n</ion-content>\\n\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Ryb25lL2Ryb25lLnBhZ2Uuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n\nimport { ScannerServiceProvider } from '../providers/scanner-service/scanner.service';\n\n@Component({\n\tselector: 'dronetab',\n\ttemplateUrl: 'drone.page.html',\n\tstyleUrls: ['drone.page.scss']\n})\nexport class DroneTab implements ScannerDelegate {\n\tpublic barcodes: Barcode[] = [];\n\tpublic continuousMode: boolean = false;\n\tprivate contentTop: number;\n\n  \tconstructor(\n  \t\tpublic scanner: ScannerServiceProvider\n  \t) {\n  \t\t\n  \t}\n\n\tpublic ionViewDidEnter(): void {\n\t\tconsole.log(this.contentTop);\n   \tthis.scanner.contentTop = 70;\n   \tthis.scanner.delegate = this;\n   \tthis.scanner.start();\n  \t}\n\n  \tpublic didScan(session: ScanSession) {\n   \tif (!this.continuousMode) {\n      \tsession.pauseScanning();\n    \t}\n    \tthis.barcodes = session.newlyRecognizedCodes;\n  \t}\n\n  \tpublic resumeScanning() {\n   \tthis.scanner.resume();\n   \tthis.barcodes = [];\n  \t}\n\n  \tpublic toggleContinuousMode() {\n   \tthis.continuousMode = !this.continuousMode;\n   \tthis.scanner.resume();\n  \t}\n}"],"sourceRoot":""}